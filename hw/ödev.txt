example1

import scipy as sc
import numpy as np
array1 =np.array ([1 ,2 ,3])
print(array1)

[1 2 3]

example2

array2=np.linspace(0 ,10 ,5)
print(array2,'\n')
array22=np.linspace(0 ,1 ,3)
print(array22,'\n')

[ 0.  2.5  7.5 10.]

[.  0.5 1. ]


example 3

array3=np.arange(0 ,10 ,1)
print(array3,'\n')
array4=np.arange(0,5 , 0.5)
print(array4,'\n')
array44=np.arange(5)
print(array44,'\n')
print(np.arange(10),'\n')

[0 1 2 3 4 5 6 7 8 9]

[0.  0.5 1.  1.5 2.  2.5 3.  3.5 4.  4.5] 

[0 1 2 3 4] 

[0 1 2 3 4 5 6 7 8 9] 


example4


array5=np.zeros(5)
print(array5,'\n')
array6=np.ones(3)
print(array6,'\n')

[0. 0. 0. 0. 0.] 

[1. 1. 1.] 


example5

array7=np.linspace(-2,3,6)
print(array7,'\n')
print(array7+2,'\n')
print(array7-1,'\n')
print(array7*3,'\n')
print(array7/2,'\n')
print(array7**4,'\n')
print((array7+2)*5,'\n')
print(np.sin(array7),'\n')
print(np.cos(array7),'\n')



[-2. -1.  0.  1.  2.  3.] 

[0. 1. 2. 3. 4. 5.] 

[-3. -2. -1.  0.  1.  2.] 

[-6. -3.  0.  3.  6.  9.] 

[-1.  -0.5  0.   0.5  1.   1.5] 

[16.  1.  0.  1. 16. 81.] 

[ 0.  5. 10. 15. 20. 25.] 

[-0.90929743 -0.84147098  0.          0.84147098  0.90929743  0.14112001] 

[-0.41614684  0.54030231  1.          0.54030231 -0.41614684 -0.9899925 ] 


example6


array8=np.array ([10 ,20 ,30])
array9=np.array ([50 ,60 ,70])
result1=array8+array9
print(result1,'\n')
print(array9-array8,'\n')
print(array8-array9,'\n')
print(array8*array9,'\n')
print(array9/array8,'\n')


[ 60  80 100] 

[40 40 40] 

[-40 -40 -40] 

[ 500 1200 2100] 

[5.         3.         2.33333333] 


example7



array10=np.array([[1 ,2 ,3],[4 ,5 ,6]])
print(array10,'\n')
array11=np.array([[1 ,1 ,1],[2 ,2 ,2],[3 ,3 ,3]])
print(array11,'\n')

[[1 2 3]
 [4 5 6]] 

[[1 1 1]
 [2 2 2]
 [3 3 3]] 


example8


array12=np.array([np.eye(3)])
print(array12,'\n')

[[[1. 0. 0.]
  [0. 1. 0.]
  [0. 0. 1.]]] 


example9

array13=np.arange(8)
print(array13,'\n')
array14=np.reshape(array13,(2,4))
print(array14,'\n')
print(np.reshape(array13,(4,2)),'\n')
print(np.reshape(array13,(2,5)),'\n')


[0 1 2 3 4 5 6 7] 

[[0 1 2 3]
 [4 5 6 7]] 

[[0 1]
 [2 3]
 [4 5]
 [6 7]] 

<ipython-input-7-f4adfb981769> in <module>
      4 print(array14,'\n')
      5 print(np.reshape(array13,(4,2)),'\n')
----> 6 print(np.reshape(array13,(2,5)),'\n')

/srv/conda/lib/python3.6/site-packages/numpy/core/fromnumeric.py in reshape(a, newshape, order)
    290            [5, 6]])
    291     """
--> 292     return _wrapfunc(a, 'reshape', newshape, order=order)
    293 
    294 

/srv/conda/lib/python3.6/site-packages/numpy/core/fromnumeric.py in _wrapfunc(obj, method, *args, **kwds)
     54 def _wrapfunc(obj, method, *args, **kwds):
     55     try:
---> 56         return getattr(obj, method)(*args, **kwds)
     57 
     58     # An AttributeError occurs if the object does not have

ValueError: cannot reshape array of size 8 into shape (2,5)


example10

array15=np.array([[1 ,4 ,5],[2 ,3 ,6]])
print(array15,'\n')
print(array15+2,'\n')
print(array15-3,'\n')
print(array15*5,'\n')
print(2/array15,'\n')
print(array15**3,'\n')
print(np.cos(array15),'\n')


[[1 4 5]
 [2 3 6]] 

[[3 6 7]
 [4 5 8]] 

[[-2  1  2]
 [-1  0  3]] 

[[ 5 20 25]
 [10 15 30]] 

[[2.         0.5        0.4       ]
 [1.         0.66666667 0.33333333]] 

[[  1  64 125]
 [  8  27 216]] 

[[ 0.54030231 -0.65364362  0.28366219]
 [-0.41614684 -0.9899925   0.96017029]] 


example11

array16=np.array([[1. ,2. ,3.],[4. ,5. ,6.]])
print(array16,'\n')
array17=np.array([[-1. ,-2. ,-3.],[-4. ,-5. ,-6.]])
print(array17,'\n')
array16 * array17
print(np.dot(array16 , array17),'\n')


[[1. 2. 3.]
 [4. 5. 6.]] 

[[-1. -2. -3.]
 [-4. -5. -6.]] 

ValueError: shapes (2,3) and (2,3) not aligned: 3 (dim 1) != 2 (dim 0)






